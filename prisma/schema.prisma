generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  User
  Admin
}

enum GroupMemberRole {
  Member
  Organizer
  CoOrganizer
  EventOrganizer
  AssistantOrganizer
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  bio           String?
  profilePhoto  String?
  location      Json?
  isAdult       Boolean       @default(false)
  role          RoleEnum      @default(User)
  members       GroupMember[]
  groupsAdmin   Group[]
  createdTopics Topic[]
  network       Network?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group[]
  isActive  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String        @id @default(cuid())
  location    Json
  topics      Topic[]
  name        String        @unique
  description String
  members     GroupMember[]
  admin       User          @relation(fields: [adminId], references: [id])
  adminId     String
  network     Network?      @relation(fields: [networkId], references: [id])
  networkId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model GroupMember {
  id        String           @id @default(cuid())
  group     Group?           @relation(fields: [groupId], references: [id])
  groupId   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  role      GroupMemberRole? @default(Member)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Network {
  id              String   @id @default(cuid())
  name            String   @unique
  organization    String?
  organizationUrl String?
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  groups          Group[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
