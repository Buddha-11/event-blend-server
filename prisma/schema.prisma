generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  User
  Admin
}

enum UserStatusEnum {
  Online
  Offline
  Banned
}

enum GroupMemberRole {
  Member
  Organizer
  CoOrganizer
  EventOrganizer
  AssistantOrganizer
}

enum EventTypeEnum {
  Online
  InPerson
}

model Location {
  id        String   @id @default(cuid())
  city      String   @unique
  country   String?
  state     String?
  timezone  String
  lat       Decimal
  lon       Decimal
  groups    Group[]
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  bio          String?
  profilePhoto String?
  role         RoleEnum       @default(User)
  members      GroupMember[]
  groupsAdmin  Group[]
  events       Event[]
  network      Network?
  status       UserStatusEnum @default(Offline)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Topic {
  id         String   @id @default(cuid())
  name       String   @unique
  slug       String   @unique
  groups     Group[]
  events     Event[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  poster      String?
  topics      Topic[]
  events      Event[]
  members     GroupMember[]
  location    Location      @relation(references: [id], fields: [locationId])
  locationId  String
  category    Category      @relation(references: [id], fields: [categoryId])
  categoryId  String
  admin       User          @relation(fields: [adminId], references: [id])
  adminId     String
  network     Network?      @relation(fields: [networkId], references: [id])
  networkId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model GroupMember {
  id        String           @id @default(cuid())
  group     Group?           @relation(fields: [groupId], references: [id])
  groupId   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  role      GroupMemberRole? @default(Member)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Network {
  id              String   @id @default(cuid())
  name            String   @unique
  organization    String?
  organizationUrl String?
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  groups          Group[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  events    Event[]
  groups    Group[]
  topics    Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id         String        @id @default(cuid())
  name       String
  group      Group         @relation(references: [id], fields: [groupId])
  groupId    String
  poster     String?
  location   Location      @relation(references: [id], fields: [locationId])
  locationId String
  details    String?
  dates      EventDate[]
  attendees  User[]
  address    String
  eventType  EventTypeEnum @default(InPerson)
  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId String
  topics     Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventDate {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])

  @@index([eventId])
}
